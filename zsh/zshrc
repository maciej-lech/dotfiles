## ZSH configuration

# Update PATH
export PATH=$HOME/.local/bin:$PATH

export ZSH="$HOME/.cache/antidote/ohmyzsh/ohmyzsh"

## OMZ configuration
export ZSH_CUSTOM="$HOME/.zsh"

zstyle ':omz:update' mode disabled  # disable automatic updates

# Plugins are installed with antidote
plugins=(
)

## Misc configuration

# Spaceship theme
SPACESHIP_PROMPT_ORDER=(
    jobs          # Background jobs indicator
    exit_code     # Exit code section
    exec_time     # Execution time
    time          # Time stamps section
    user          # Username section
    host          # Hostname section

    git           # Git section (git_branch + git_status)
    # hg            # Mercurial section (hg_branch  + hg_status)

    # vi_mode       # Vi-mode indicator
    venv          # virtualenv section
    # pyenv         # Pyenv section
    # kubectl       # Kubectl context section

    async

    # line_sep      # Line break
    dir           # Current directory section
    char          # Prompt character
)
SPACESHIP_PROMPT_ASYNC="false"
SPACESHIP_PROMPT_ADD_NEWLINE="true"
SPACESHIP_PROMPT_SEPARATE_LINE="false"
SPACESHIP_PROMPT_PREFIXES_SHOW="false"
SPACESHIP_PROMPT_SUFFIXES_SHOW="true"
SPACESHIP_PROMPT_DEFAULT_PREFIX=""
SPACESHIP_PROMPT_DEFAULT_SUFFIX=" "
#SPACESHIP_CHAR_SYMBOL="‚ù±"
SPACESHIP_CHAR_SUFFIX=" "
SPACESHIP_GIT_SYMBOL=""
SPACESHIP_EXIT_CODE_SHOW="true"
SPACESHIP_EXIT_CODE_SYMBOL=""

# Homebrew
if [ -d "/home/linuxbrew/.linuxbrew" ]; then
    export HOMEBREW_NO_ENV_HINTS=1
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# PyEnv
if [ -d "${HOME}/.pyenv" ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

# GoEnv
if [ -d "${HOME}/.goenv" ]; then
    export GOENV_ROOT="$HOME/.goenv"
    export PATH="$GOENV_ROOT/bin:$PATH"
    eval "$(goenv init -)"
    export PATH="$GOROOT/bin:$PATH"
    export PATH="$PATH:$GOPATH/bin"
fi

# Node.js
if [ -d "${HOME}/.nvm" ]; then
    export NVM_DIR="${HOME}/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# GNOME Keyring
export SSH_AUTH_SOCK="/run/user/$UID/keyring/ssh"

# Keychain
# if (( $+commands[keychain] )); then
#     eval "$(keychain -q --eval)"
# fi

## Antidote configuration

zstyle ':antidote:bundle' use-friendly-names 'yes'

# Clone antidote if necessary.
[[ -e ${ZDOTDIR:-~}/.antidote ]] ||
  git clone https://github.com/mattmc3/antidote.git ${ZDOTDIR:-~}/.antidote

# Source antidote.
source ${ZDOTDIR:-~}/.antidote/antidote.zsh

# Initialize antidote's dynamic mode, which changes `antidote bundle`
# from static mode.
source <(antidote init)

# Bundle plugins with antidote.
antidote bundle <<EOBUNDLES
    # OMZ framework
    ohmyzsh/ohmyzsh

    # OMZ plugins
    ohmyzsh/ohmyzsh path:plugins/ansible
    ohmyzsh/ohmyzsh path:plugins/command-not-found
    ohmyzsh/ohmyzsh path:plugins/common-aliases
    ohmyzsh/ohmyzsh path:plugins/colored-man-pages
    ohmyzsh/ohmyzsh path:plugins/dircycle
    ohmyzsh/ohmyzsh path:plugins/dotenv
    ohmyzsh/ohmyzsh path:plugins/gcloud
    ohmyzsh/ohmyzsh path:plugins/pip
    ohmyzsh/ohmyzsh path:plugins/poetry
    ohmyzsh/ohmyzsh path:plugins/pyenv
    ohmyzsh/ohmyzsh path:plugins/python
    ohmyzsh/ohmyzsh path:plugins/sudo

    # 3rd party plugins
    zsh-users/zsh-autosuggestions
    zsh-users/zsh-completions
    zsh-users/zsh-syntax-highlighting
    greymd/tmux-xpanes

    # ZSH-Utils plugins
    belak/zsh-utils path:completion
    belak/zsh-utils path:history

    # Theme
    spaceship-prompt/spaceship-prompt
EOBUNDLES

## Shell tools configuration

if (( $+commands[fzf] )); then
    eval "$(fzf --zsh)"

    export FZF_COMPLETION_TRIGGER='~~'
    export FZF_CTRL_T_COMMAND='fd --type f --hidden --strip-cwd-prefix --exclude .git'
    export FZF_ALT_C_COMMAND='fd --type d --hidden --strip-cwd-prefix --exclude .git'
    export FZF_DEFAULT_COMMAND="$FZF_CTRL_T_COMMAND"
    export FZF_CTRL_T_OPTS='--preview "bat -n --color=always --line-range :500 {}"'
    export FZF_ALT_C_OPTS='--preview "eza --tree --group-directories-first --level 2 --color=always {} | head -200"'
    export FZF_CTRL_R_OPTS='--preview "echo '{}'"'
    export FZF_DEFAULT_OPTS="$FZF_CTRL_T_OPTS"

    # Use fd (https://github.com/sharkdp/fd) for listing path candidates.
    # - The first argument to the function ($1) is the base path to start traversal
    # - See the source code (completion.{bash,zsh}) for the details.
    _fzf_compgen_path() {
        fd --hidden --exclude ".git" . "$1"
    }

    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
        fd --type d --hidden --exclude ".git" . "$1"
    }

    # Advanced customization of fzf options via _fzf_comprun function
    # - The first argument to the function is the name of the command.
    # - You should make sure to pass the rest of the arguments to fzf.
    _fzf_comprun() {
      local command=$1
      shift

      case "$command" in
        cd)           fzf --preview 'eza --tree --group-directories-first --level 2 --color=always {} | head -200' "$@" ;;
        export|unset) fzf --preview "eval 'echo \$'{}" "$@" ;;
        ssh)          fzf --preview 'ssh -G {} | head -3' "$@" ;;
        *)            fzf --preview 'bat -n --color=always --line-range :500 {}' "$@" ;;
      esac
    }
fi

if (( $+commands[bat] )); then
    export BAT_STYLE=numbers
    export BAT_THEME=Nord
fi

if (( $+commands[thefuck] )); then
    eval "$(thefuck --alias)"
    eval "$(thefuck --alias f)"
fi

## Autocompletion

# autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit

# hashistack autocompletion
if (( $+commands[nomad] )); then
    complete -o nospace -C /usr/bin/nomad nomad
fi
if (( $+commands[consul] )); then
    complete -o nospace -C /usr/bin/consul consul
fi
if (( $+commands[vault] )); then
    complete -o nospace -C /usr/bin/vault vault
fi

## Local RC file
[ -s "$HOME/.zshrc.local" ] && . "$HOME/.zshrc.local"

# EOF
